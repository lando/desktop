name: Ship MacOS Installer

on:
  pull_request:
  push:
    branches:
      - main
      - 'preview/**'
    tags:
      - test*
      - v*

jobs:
  ship-macos-installer:
    runs-on: ${{ matrix.os }}
    env:
      APPLE_CERT_DATA: ${{ secrets.APPLE_CERT_DATA }}
      APPLE_CERT_PASSWORD: ${{ secrets.APPLE_CERT_PASSWORD }}
      APPLE_ID_PASSWORD: ${{ secrets.APPLE_NOTARY_PASSWORD }}
      APPLE_ID: ${{ secrets.APPLE_NOTARY_USER }}
      APPLE_TEAM_ID: FY8GAUX282
      CSC_KEY_PASSWORD: ${{ secrets.APPLE_CERT_PASSWORD }}
      CSC_LINK: /tmp/certs.p12
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      TERM: xterm
    strategy:
      matrix:
        os:
          - macos-10.15
        node-version:
          - '14'

    steps:
      # Install deps and cache
      # Eventually it would be great if these steps could live in a separate YAML file
      # that could be included in line to avoid code duplication
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set other variables
        id: vars
        run: |
          # Set generic source ref vars
          echo "::set-output name=SOURCE_NAME::${GITHUB_REF#refs/*/}"
          echo "::set-output name=SOURCE_BRANCH::${GITHUB_REF#refs/heads/}"
          echo "::set-output name=SOURCE_TAG::${GITHUB_REF#refs/tags/}"
          # Unset vars if it makes sense to do so
          if [ "$GITHUB_REF" == "${GITHUB_REF#refs/tags/}" ]; then echo "::set-output name=SOURCE_TAG::"; fi
          if [ "$GITHUB_REF" == "${GITHUB_REF#refs/heads/}" ]; then echo "::set-output name=SOURCE_BRANCH::"; fi
      - name: Test user defined variables
        run: |
          echo "The SOURCE_NAME is ${{ steps.vars.outputs.SOURCE_NAME }}"
          echo "The SOURCE_BRANCH is ${{ steps.vars.outputs.SOURCE_BRANCH }}"
          echo "The SOURCE_TAG is ${{ steps.vars.outputs.SOURCE_TAG }}"
      - name: Install node ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Get Yarn cache directory
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Use Yarn cache
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ matrix.node-version }}-${{ hashFiles('**/yarn.lock') }}
      - name: Install Yarn dependencies
        run: yarn install --prefer-offline --frozen-lockfile

      # Import Mac signing certs.
      - name: Import and verify certs
        run: chmod +x scripts/import-macos-certs.sh && scripts/import-macos-certs.sh
      # Prevents signing error @see https://github.com/electron-userland/electron-builder/issues/2644#issuecomment-406653469
      - name: Clean Up Command
        run: xattr -cr .
      # Build out our release packages
      - name: Build MacOS Releases
        run: yarn build --mac
      # Verify Stuffs
      - name: Verify Signing
        run: |
          codesign --verify --verbose dist/mac-universal/gui-prototype.app
      - name: Verify Notarization
        run: |
          spctl -a -t exec -vvv dist/mac-universal/gui-prototype.app
      # Upload releases to GitHub Releases
      - name: Upload releases to GitHub Releases
        uses: softprops/action-gh-release@v1
        #if: startsWith(github.ref, 'refs/tags/')
        with:
          draft: true
          files: dist/@lando/*