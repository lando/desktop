name: Ship Windoze Installer

on:
  push:
    branches:
      - main
      - 'preview/**'
    tags:
      - test*
      - v*

jobs:
  ship-windows-installer:
    runs-on: ${{ matrix.os }}
    env:
      CSC_KEY_PASSWORD: ${{ secrets.WINDOZE_CERT_PASSWORD }}
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      TERM: xterm
      WINDOZE_CERT_DATA: ${{ secrets.WINDOZE_CERT_DATA }}
      WINDOZE_CERT_PASSWORD: ${{ secrets.WINDOZE_CERT_PASSWORD }}
    strategy:
      matrix:
        os:
          - windows-2019
        node-version:
          - '14'
        flavor:
          - exe
        arch:
          - x64

    steps:
      # Install deps and cache
      # Eventually it would be great if these steps could live in a separate YAML file
      # that could be included in line to avoid code duplication
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set other variables
        id: vars
        shell: bash
        run: |
          # Set generic source ref vars
          echo "::set-output name=SOURCE_NAME::${GITHUB_REF#refs/*/}"
          echo "::set-output name=SOURCE_BRANCH::${GITHUB_REF#refs/heads/}"
          echo "::set-output name=SOURCE_TAG::${GITHUB_REF#refs/tags/}"
          echo  ::set-output name=CURRENT_VERSION::v$(grep '"version"' package.json | cut -d '"' -f 4 | head -n 1)
          # Unset vars if it makes sense to do so
          if [ "$GITHUB_REF" == "${GITHUB_REF#refs/tags/}" ]; then echo "::set-output name=SOURCE_TAG::"; fi
          if [ "$GITHUB_REF" == "${GITHUB_REF#refs/heads/}" ]; then echo "::set-output name=SOURCE_BRANCH::"; fi
      - name: Test user defined variables
        run: |
          echo "The SOURCE_NAME is ${{ steps.vars.outputs.SOURCE_NAME }}"
          echo "The SOURCE_BRANCH is ${{ steps.vars.outputs.SOURCE_BRANCH }}"
          echo "The SOURCE_TAG is ${{ steps.vars.outputs.SOURCE_TAG }}"
          echo "The CURRENT_VERSION is ${{ steps.vars.outputs.CURRENT_VERSION }}"
      - name: Install node ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: Get Yarn cache directory
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - name: Use Yarn cache
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ matrix.node-version }}-${{ hashFiles('**/yarn.lock') }}
      - name: Install Yarn dependencies
        run: yarn install --prefer-offline --frozen-lockfile

      # Import Windows signing certs.
      - name: Import and verify certs
        shell: powershell
        run: scripts/import-win-certs.ps1
      # We set the CSC_LINK here due to Windows weird tmp dir.
      - name: Set CSC_LINK Env Var
        run: echo "CSC_LINK=$env:TMP\lando.windoze.p12" >> $env:GITHUB_ENV
      # Build out our release packages
      - name: Build Windows Releases
        shell: bash
        run: yarn build:win

      # Create and upload releases
      - name: Create releases
        shell: bash
        env:
          CURRENT_VERSION: ${{ steps.vars.outputs.CURRENT_VERSION }}
          SOURCE_BRANCH: ${{ steps.vars.outputs.SOURCE_BRANCH }}
          SOURCE_TAG: ${{ steps.vars.outputs.SOURCE_TAG }}
          ARCH: ${{ matrix.arch }}
        run: |
          # Create release directories
          mkdir -p releases dev-builds

          # Snapshot release
          if [ -z "$SOURCE_TAG" ]
          then
            cp -f "dist/@lando/gui-prototype-${{ matrix.arch }}-$CURRENT_VERSION.${{ matrix.flavor }}" "dev-builds/lando-gui-prototype-build-${{ github.sha }}-$ARCH.${{ matrix.flavor }}"
          else
            cp -f "dist/@lando/gui-prototype-${{ matrix.arch }}-$SOURCE_TAG.${{ matrix.flavor }}" "dev-builds/lando-gui-prototype-build-${{ github.sha }}-$ARCH.${{ matrix.flavor }}"
          fi

          # Branch releases
          if [ -z "$SOURCE_TAG" ]; then cp -f "dist/@lando/gui-prototype-${{ matrix.arch }}-$CURRENT_VERSION.${{ matrix.flavor }}" "releases/lando-gui-prototype-$ARCH-$SOURCE_BRANCH-latest.${{ matrix.flavor }}"; fi
          # Latest dev release
          if [[ "$SOURCE_BRANCH" == "main" ]]; then cp -f "dist/@lando/gui-prototype-${{ matrix.arch }}-$CURRENT_VERSION.${{ matrix.flavor }}" "releases/lando-gui-prototype-$ARCH-latest.${{ matrix.flavor }}"; fi
          # Tag releases
          if [ ! -z "$SOURCE_TAG" ]; then cp -f "dist/@lando/gui-prototype-${{ matrix.arch }}-$SOURCE_TAG.${{ matrix.flavor }}" "releases/lando-gui-prototype-$ARCH-$SOURCE_TAG.${{ matrix.flavor }}"; fi
          # Latest stable release
          if [ ! -z "$SOURCE_TAG" ]; then cp -f "dist/@lando/gui-prototype-${{ matrix.arch }}-$SOURCE_TAG.${{ matrix.flavor }}" "releases/lando-gui-prototype-$ARCH-stable.${{ matrix.flavor }}"; fi
         
          # Print what we end up with
          ls -lsa releases
          ls -lsa dev-builds

      # Upload back to Actions
      - name: Upload build snapshot as Actions artifact
        uses: actions/upload-artifact@v2
        with:
          name: lando-gui-prototype-build-${{ github.sha }}-${{ matrix.arch }}.${{ matrix.flavor }}
          path: dev-builds/
          if-no-files-found: error
          retention-days: 30
      # Upload releases to S3
      - name: Configure S3 Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.S3_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.S3_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Upload releases to S3
        run: |
          aws s3 sync releases s3://files.lando.dev/installer --acl public-read
          # Below is for backwards compatibility
          aws s3 sync releases s3://files.lando.dev --acl public-read
          
      # Upload releases to GitHub Releases
      - name: Upload releases to GitHub Releases
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          draft: true
          files: dist/@lando/gui-prototype-${{ matrix.arch }}-${{ steps.vars.outputs.SOURCE_TAG }}.${{ matrix.flavor }}